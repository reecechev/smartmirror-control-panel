#!/usr/bin/env python3
import json, os, sys, time
from urllib import request

RENDER_ENDPOINT = "https://smartmirror-control-panel.onrender.com/ngrok"
LOCAL_FILE = "/home/pi/smartmirror/ngrok.json"

def _http_get_json(url, timeout=4):
	with request.urlopen(url, timeout=timeout) as r:
		return json.load(r)

def get_public_url(max_wait=30):
	"""
	Poll the local ngrok API until an HTTPS public_url appears.
	Raise if it never does within max_wait seconds.
	"""
	api = "http://127.0.0.1:4040/api/tunnels"
	for _ in range(max_wait):
		try:
			data = _http_get_json(api, timeout=2)
			for t in data.get("tunnels", []):
				u = t.get("public_url", "")
				if u.startswith("https://"):
					return u
		except Exception:
			pass
		time.sleep(1)
	raise RuntimeError("No https tunnel found (ngrok not ready)")

def save_local(base):
	payload = {"base": base, "status": "ok",
	"updated_at": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())}
	tmp = LOCAL_FILE + ".tmp"
	with open(tmp, "w", encoding="utf-8") as f:
		json.dump(payload, f, ensure_ascii=False, indent=2)
	os.replace(tmp, LOCAL_FILE)
	print("Updated local Flask:", payload)

def _http_get_status(url, timeout=4):
	try:
		with request.urlopen(url, timeout=timeout) as r:
			return r.status
	except Exception:
		return None

def post_render(base, max_wait=120):
	"""
	Wake Render by hitting '/', then POST /ngrok with backoff retries.
	"""
	start = time.time()

	# Wake the app (any non-5xx means it's awake)
	wake_url = RENDER_ENDPOINT.rsplit("/", 1)[0] + "/"
	while time.time() - start < max_wait:
		code = _http_get_status(wake_url, timeout=4)
		if code and code < 500:
			break
		time.sleep(3)

	payload = json.dumps({"base": base}).encode("utf-8")
	req = request.Request(
		RENDER_ENDPOINT,
		data=payload,
		headers={"Content-Type": "application/json"},
		method="POST",
	)

	delay = 2
	while time.time() - start < max_wait:
		try:
			with request.urlopen(req, timeout=6) as r:
				if 200 <= r.status < 300:
					print("Posted to Render OK.")
					return True
			print("Render POST status:", r.status)
		except Exception as e:
			print("Render POST error:", e)
		time.sleep(delay)
		delay = min(delay * 1.7, 15)

	print("WARN: Render update failed after retries.")
	return False

def main():
	base = get_public_url(max_wait=30) # waits until ngrok is ready
	print("Public URL:", base)
	save_local(base) # keep Flask /ngrok GET fresh
	post_render(base) # push to Render

if __name__ == "__main__":
	main()
